/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, KeyValueDiffers, } from '@angular/core';
import { Subject } from 'rxjs';
export class MaphilightComponent {
    /**
     * @param {?} elRef
     * @param {?} differs
     */
    constructor(elRef, differs) {
        this.elRef = elRef;
        this.events = {
            imgLoaded: new Subject(),
            updateMaphilight: new Subject(),
        };
        this.el = this.elRef.nativeElement;
        this.configDiffer = differs.find({}).create();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.img = this.el.querySelector('img');
        this.map = this.el.querySelector('map');
        /** @type {?} */
        const id = this.el.getAttribute('id');
        this.img.setAttribute('usemap', '#' + id + ".map");
        this.map.setAttribute('id', id + ".map");
        this.map.setAttribute('name', id + ".map");
        // Wait until image is loaded. Otherwise the $(img).height() in maphilight.js may return 0,
        // which causes mouseover effect to break.
        // See also  https://stackoverflow.com/questions/16084374/jquery-width-and-height-return-0-for-img-element
        this.img.onload = (/**
         * @return {?}
         */
        () => {
            this.events.imgLoaded.next();
            this.updateMaphilight();
        });
    }
    /**
     * @return {?}
     */
    updateMaphilight() {
        if (!this.img)
            return;
        this.events.updateMaphilight.next();
        window.jQuery(this.img).maphilight(this.configToApply());
    }
    ;
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const changes = this.configDiffer.diff(this.config);
        if (changes) {
            this.updateMaphilight();
        }
    }
    /**
     * @private
     * @return {?}
     */
    configToApply() {
        /** @type {?} */
        const config = Object.assign({}, this.config);
        if (config.strokeColor && config.strokeColor[0] == '#')
            config.strokeColor = config.strokeColor.substr(1);
        if (config.fillColor && config.fillColor[0] == '#')
            config.fillColor = config.fillColor.substr(1);
        if (config.shadowColor && config.shadowColor[0] == '#')
            config.shadowColor = config.shadowColor.substr(1);
        return config;
    }
}
MaphilightComponent.decorators = [
    { type: Component, args: [{
                selector: 'maphilight',
                template: "<ng-content>\n</ng-content>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
MaphilightComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: KeyValueDiffers }
];
MaphilightComponent.propDecorators = {
    config: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MaphilightComponent.prototype.config;
    /** @type {?} */
    MaphilightComponent.prototype.configDiffer;
    /** @type {?} */
    MaphilightComponent.prototype.el;
    /** @type {?} */
    MaphilightComponent.prototype.img;
    /** @type {?} */
    MaphilightComponent.prototype.map;
    /** @type {?} */
    MaphilightComponent.prototype.events;
    /**
     * @type {?}
     * @private
     */
    MaphilightComponent.prototype.elRef;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwaGlsaWdodC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1tYXBoaWxpZ2h0LyIsInNvdXJjZXMiOlsibGliL21hcGhpbGlnaHQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFFTCxVQUFVLEVBQ0QsZUFBZSxHQUN6QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBZ0IvQixNQUFNLE9BQU8sbUJBQW1COzs7OztJQVc5QixZQUNVLEtBQWlCLEVBQ3pCLE9BQXdCO1FBRGhCLFVBQUssR0FBTCxLQUFLLENBQVk7UUFOM0IsV0FBTSxHQUFHO1lBQ1AsU0FBUyxFQUFFLElBQUksT0FBTyxFQUFhO1lBQ25DLGdCQUFnQixFQUFFLElBQUksT0FBTyxFQUFPO1NBQ3JDLENBQUE7UUFNQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoRCxDQUFDOzs7O0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Y0FDbEMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztRQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQVksRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBVSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFFbkQsMkZBQTJGO1FBQzNGLDBDQUEwQztRQUMxQywwR0FBMEc7UUFDMUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNOzs7UUFBRyxHQUFHLEVBQUU7WUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDNUIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFBLENBQUE7SUFDSCxDQUFDOzs7O0lBRUQsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQUUsT0FBTztRQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFBO1FBQ25DLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBQUEsQ0FBQzs7OztJQUVGLFNBQVM7O2NBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDbkQsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtTQUN4QjtJQUNILENBQUM7Ozs7O0lBRU8sYUFBYTs7Y0FDYixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM3QyxJQUFJLE1BQU0sQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHO1lBQ3BELE1BQU0sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbkQsSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRztZQUNoRCxNQUFNLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQy9DLElBQUksTUFBTSxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUc7WUFDcEQsTUFBTSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNuRCxPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUM7OztZQS9ERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLHlDQUEwQzs7YUFFM0M7Ozs7WUFsQkMsVUFBVTtZQUNELGVBQWU7OztxQkFtQnZCLEtBQUs7Ozs7SUFBTixxQ0FBcUI7O0lBQ3JCLDJDQUF1Qzs7SUFDdkMsaUNBQWlCOztJQUNqQixrQ0FBc0I7O0lBQ3RCLGtDQUFvQjs7SUFDcEIscUNBR0M7Ozs7O0lBR0Msb0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCxcbiAgRWxlbWVudFJlZixcbiAgRG9DaGVjaywgS2V5VmFsdWVEaWZmZXJzLCBLZXlWYWx1ZURpZmZlcixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgalF1ZXJ5OiBhbnk7XG4gIH1cbiAgaW50ZXJmYWNlIEpRdWVyeSB7XG4gICAgbWFwaGlsaWdodChvcHRpb25zPzogYW55KTogYW55O1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21hcGhpbGlnaHQnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWFwaGlsaWdodC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL21hcGhpbGlnaHQuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIE1hcGhpbGlnaHRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgQElucHV0KCkgY29uZmlnOiBhbnk7XG4gIGNvbmZpZ0RpZmZlcjogS2V5VmFsdWVEaWZmZXI8YW55LCBhbnk+O1xuICBlbDogIEhUTUxFbGVtZW50O1xuICBpbWc6IEhUTUxJbWFnZUVsZW1lbnQ7XG4gIG1hcDogSFRNTE1hcEVsZW1lbnQ7XG4gIGV2ZW50cyA9IHtcbiAgICBpbWdMb2FkZWQ6IG5ldyBTdWJqZWN0PHVuZGVmaW5lZD4oKSxcbiAgICB1cGRhdGVNYXBoaWxpZ2h0OiBuZXcgU3ViamVjdDxhbnk+KCksXG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgIGRpZmZlcnM6IEtleVZhbHVlRGlmZmVyc1xuICApIHtcbiAgICB0aGlzLmVsID0gdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIHRoaXMuY29uZmlnRGlmZmVyID0gZGlmZmVycy5maW5kKHt9KS5jcmVhdGUoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmltZyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignaW1nJyk7XG4gICAgdGhpcy5tYXAgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ21hcCcpO1xuICAgIGNvbnN0IGlkID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoJ2lkJylcbiAgICB0aGlzLmltZy5zZXRBdHRyaWJ1dGUoJ3VzZW1hcCcsICcjJyArIGlkICsgXCIubWFwXCIpO1xuICAgIHRoaXMubWFwLnNldEF0dHJpYnV0ZSgnaWQnLCAgICAgICAgICAgaWQgKyBcIi5tYXBcIik7XG4gICAgdGhpcy5tYXAuc2V0QXR0cmlidXRlKCduYW1lJywgICAgICAgICBpZCArIFwiLm1hcFwiKTtcblxuICAgIC8vIFdhaXQgdW50aWwgaW1hZ2UgaXMgbG9hZGVkLiBPdGhlcndpc2UgdGhlICQoaW1nKS5oZWlnaHQoKSBpbiBtYXBoaWxpZ2h0LmpzIG1heSByZXR1cm4gMCxcbiAgICAvLyB3aGljaCBjYXVzZXMgbW91c2VvdmVyIGVmZmVjdCB0byBicmVhay5cbiAgICAvLyBTZWUgYWxzbyAgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTYwODQzNzQvanF1ZXJ5LXdpZHRoLWFuZC1oZWlnaHQtcmV0dXJuLTAtZm9yLWltZy1lbGVtZW50XG4gICAgdGhpcy5pbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgdGhpcy5ldmVudHMuaW1nTG9hZGVkLm5leHQoKVxuICAgICAgdGhpcy51cGRhdGVNYXBoaWxpZ2h0KCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlTWFwaGlsaWdodCgpIHtcbiAgICBpZiAoIXRoaXMuaW1nKSByZXR1cm47XG4gICAgdGhpcy5ldmVudHMudXBkYXRlTWFwaGlsaWdodC5uZXh0KClcbiAgICB3aW5kb3cualF1ZXJ5KHRoaXMuaW1nKS5tYXBoaWxpZ2h0KHRoaXMuY29uZmlnVG9BcHBseSgpKTtcbiAgfTtcblxuICBuZ0RvQ2hlY2soKSB7XG4gICAgY29uc3QgY2hhbmdlcyA9IHRoaXMuY29uZmlnRGlmZmVyLmRpZmYodGhpcy5jb25maWcpXG4gICAgaWYgKGNoYW5nZXMpIHtcbiAgICAgIHRoaXMudXBkYXRlTWFwaGlsaWdodCgpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb25maWdUb0FwcGx5KCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnKVxuICAgIGlmIChjb25maWcuc3Ryb2tlQ29sb3IgJiYgY29uZmlnLnN0cm9rZUNvbG9yWzBdID09ICcjJylcbiAgICAgIGNvbmZpZy5zdHJva2VDb2xvciA9IGNvbmZpZy5zdHJva2VDb2xvci5zdWJzdHIoMSlcbiAgICBpZiAoY29uZmlnLmZpbGxDb2xvciAmJiBjb25maWcuZmlsbENvbG9yWzBdID09ICcjJylcbiAgICAgIGNvbmZpZy5maWxsQ29sb3IgPSBjb25maWcuZmlsbENvbG9yLnN1YnN0cigxKVxuICAgIGlmIChjb25maWcuc2hhZG93Q29sb3IgJiYgY29uZmlnLnNoYWRvd0NvbG9yWzBdID09ICcjJylcbiAgICAgIGNvbmZpZy5zaGFkb3dDb2xvciA9IGNvbmZpZy5zaGFkb3dDb2xvci5zdWJzdHIoMSlcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cbn1cblxuIl19