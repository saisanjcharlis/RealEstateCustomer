(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-maphilight', ['exports', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (global = global || self, factory(global['ng-maphilight'] = {}, global.ng.core, global.rxjs, global.ng.common));
}(this, function (exports, core, rxjs, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaphilightService = /** @class */ (function () {
        function MaphilightService() {
        }
        MaphilightService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        MaphilightService.ctorParameters = function () { return []; };
        /** @nocollapse */ MaphilightService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function MaphilightService_Factory() { return new MaphilightService(); }, token: MaphilightService, providedIn: "root" });
        return MaphilightService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaphilightComponent = /** @class */ (function () {
        function MaphilightComponent(elRef, differs) {
            this.elRef = elRef;
            this.events = {
                imgLoaded: new rxjs.Subject(),
                updateMaphilight: new rxjs.Subject(),
            };
            this.el = this.elRef.nativeElement;
            this.configDiffer = differs.find({}).create();
        }
        /**
         * @return {?}
         */
        MaphilightComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.img = this.el.querySelector('img');
            this.map = this.el.querySelector('map');
            /** @type {?} */
            var id = this.el.getAttribute('id');
            this.img.setAttribute('usemap', '#' + id + ".map");
            this.map.setAttribute('id', id + ".map");
            this.map.setAttribute('name', id + ".map");
            // Wait until image is loaded. Otherwise the $(img).height() in maphilight.js may return 0,
            // which causes mouseover effect to break.
            // See also  https://stackoverflow.com/questions/16084374/jquery-width-and-height-return-0-for-img-element
            this.img.onload = (/**
             * @return {?}
             */
            function () {
                _this.events.imgLoaded.next();
                _this.updateMaphilight();
            });
        };
        /**
         * @return {?}
         */
        MaphilightComponent.prototype.updateMaphilight = /**
         * @return {?}
         */
        function () {
            if (!this.img)
                return;
            this.events.updateMaphilight.next();
            window.jQuery(this.img).maphilight(this.configToApply());
        };
        /**
         * @return {?}
         */
        MaphilightComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var changes = this.configDiffer.diff(this.config);
            if (changes) {
                this.updateMaphilight();
            }
        };
        /**
         * @private
         * @return {?}
         */
        MaphilightComponent.prototype.configToApply = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var config = Object.assign({}, this.config);
            if (config.strokeColor && config.strokeColor[0] == '#')
                config.strokeColor = config.strokeColor.substr(1);
            if (config.fillColor && config.fillColor[0] == '#')
                config.fillColor = config.fillColor.substr(1);
            if (config.shadowColor && config.shadowColor[0] == '#')
                config.shadowColor = config.shadowColor.substr(1);
            return config;
        };
        MaphilightComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'maphilight',
                        template: "<ng-content>\n</ng-content>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        MaphilightComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.KeyValueDiffers }
        ]; };
        MaphilightComponent.propDecorators = {
            config: [{ type: core.Input }]
        };
        return MaphilightComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaphilightModule = /** @class */ (function () {
        function MaphilightModule() {
        }
        MaphilightModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [MaphilightComponent],
                        exports: [MaphilightComponent]
                    },] }
        ];
        return MaphilightModule;
    }());

    exports.MaphilightComponent = MaphilightComponent;
    exports.MaphilightModule = MaphilightModule;
    exports.MaphilightService = MaphilightService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-maphilight.umd.js.map
