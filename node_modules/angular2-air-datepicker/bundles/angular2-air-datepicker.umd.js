(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/forms'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('angular2-air-datepicker', ['exports', '@angular/common', '@angular/forms', '@angular/core'], factory) :
    (factory((global['angular2-air-datepicker'] = {}),global.ng.common,global.ng.forms,global.ng.core));
}(this, (function (exports,common,forms,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AirOptions = /** @class */ (function () {
        function AirOptions(options) {
            if (options === void 0) {
                options = ( /** @type {?} */({}));
            }
            this.timepicker = !!options.timepicker;
            this.format12h = !!options.format12h;
            this.fullDays = !!options.fullDays;
            this.language = options.language || 'en';
            this.hourStep = options.hourStep || 1;
            this.minuteStep = options.minuteStep || 1;
            this.enabledDateRanges = options.enabledDateRanges || [];
        }
        /**
         * @param {?} date
         * @return {?}
         */
        AirOptions.prototype.isDisabled = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                var e_1, _a;
                try {
                    for (var _b = __values(this.enabledDateRanges), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var dateRange = _c.value;
                        if (date >= dateRange.start && date <= dateRange.end) {
                            return false;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return !!this.enabledDateRanges.length;
            };
        return AirOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AirCalendar = /** @class */ (function () {
        function AirCalendar(date, airOptions) {
            if (date === void 0) {
                date = new Date;
            }
            if (airOptions === void 0) {
                airOptions = new AirOptions;
            }
            this.daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            /** @type {?} */
            var currentDate = new Date;
            this.currentMonth = currentDate.getMonth();
            this.currentYear = currentDate.getFullYear();
            this.airOptions = airOptions;
            this.year = date.getFullYear();
            this.month = date.getMonth();
            this.date = date.getDate();
            this.hour = date.getHours();
            this.minute = date.getMinutes();
            this.updateCalendar();
        }
        /**
         * @return {?}
         */
        AirCalendar.prototype.updateCalendar = /**
         * @return {?}
         */
            function () {
                this.airDays = [];
                /** @type {?} */
                var daysInMonth = this.getDaysInMonth(this.month);
                /** @type {?} */
                var date = new Date;
                /** @type {?} */
                var firstDayOfMonth = ((new Date(this.year, this.month, 1)).getDay() || 7) - 1;
                // making 0 == monday
                /** @type {?} */
                var weekend = new AirWeekend;
                if (firstDayOfMonth /* is not monday (0) */) {
                    /** @type {?} */
                    var daysInLastMonth = this.getDaysInMonth(this.month - 1);
                    /** @type {?} */
                    var prevAirMonth = new AirMonth(this.month - 1, this.year);
                    for (var dateNo = daysInLastMonth - firstDayOfMonth + 1; dateNo <= daysInLastMonth; dateNo++) {
                        this.airDays.push(new AirDay(dateNo, weekend.progress(), this.airOptions.isDisabled(new Date(prevAirMonth.year, prevAirMonth.month, dateNo)), true));
                    }
                }
                for (var dateNo = 1; dateNo <= daysInMonth; dateNo++) {
                    this.airDays.push(new AirDay(dateNo, weekend.progress(), this.airOptions.isDisabled(new Date(this.year, this.month, dateNo))));
                }
                if (this.date > daysInMonth) {
                    this.date = daysInMonth; // select the maximum available this month instead
                }
                // set the current date if it's the current month & year
                if (date.getMonth() == this.month && date.getFullYear() == this.year) {
                    this.airDays[firstDayOfMonth + date.getDate() - 1].current = true;
                }
                /** @type {?} */
                var daysSoFar = firstDayOfMonth + daysInMonth;
                /** @type {?} */
                var nextAirMonth = new AirMonth(this.month + 1, this.year);
                for (var dateNo = 1; dateNo <= (daysSoFar > 35 ? 42 : 35) - daysSoFar; dateNo++) {
                    this.airDays.push(new AirDay(dateNo, weekend.progress(), this.airOptions.isDisabled(new Date(nextAirMonth.year, nextAirMonth.month, dateNo)), true));
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        AirCalendar.prototype.selectDate = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                this.date = this.airDays[index].date;
                // might be a day from the previous/next month
                if (index < 7 && this.date > 20) {
                    this.setMonth(this.month - 1);
                }
                else if (index > 20 && this.date < 8) {
                    this.setMonth(this.month + 1);
                }
            };
        /**
         * @param {?} month
         * @return {?}
         */
        AirCalendar.prototype.setMonth = /**
         * @param {?} month
         * @return {?}
         */
            function (month) {
                /** @type {?} */
                var airMonth = new AirMonth(month, this.year);
                this.month = airMonth.month;
                this.year = airMonth.year;
                this.updateCalendar();
            };
        /**
         * @param {?} year
         * @return {?}
         */
        AirCalendar.prototype.setYear = /**
         * @param {?} year
         * @return {?}
         */
            function (year) {
                this.year = year;
            };
        /**
         * @param {?} month
         * @return {?}
         */
        AirCalendar.prototype.getDaysInMonth = /**
         * @param {?} month
         * @return {?}
         */
            function (month) {
                /** @type {?} */
                var airMonth = new AirMonth(month, this.year);
                if (airMonth.month == 1 && ((airMonth.year % 4 == 0) && (airMonth.year % 100 != 0)) || (airMonth.year % 400 == 0)) {
                    return 29;
                }
                return this.daysInMonth[airMonth.month];
            };
        return AirCalendar;
    }());
    // normalizes month/year
    var  
    // normalizes month/year
    AirMonth = /** @class */ (function () {
        function AirMonth(month, year) {
            if (month > 11) {
                year++;
                month = 0;
            }
            else if (month < 0) {
                year--;
                month = 11;
            }
            this.month = month;
            this.year = year;
        }
        return AirMonth;
    }());
    var AirDay = /** @class */ (function () {
        function AirDay(date, weekend, disabled, other, current) {
            if (weekend === void 0) {
                weekend = false;
            }
            if (disabled === void 0) {
                disabled = false;
            }
            if (other === void 0) {
                other = false;
            }
            if (current === void 0) {
                current = false;
            }
            this.date = date;
            this.weekend = weekend;
            this.disabled = disabled;
            this.other = other;
            this.current = current;
        }
        return AirDay;
    }());
    var AirWeekend = /** @class */ (function () {
        function AirWeekend(day) {
            if (day === void 0) {
                day = 0;
            }
            this.day = day;
        }
        /**
         * @return {?}
         */
        AirWeekend.prototype.progress = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var weekend = false;
                if (this.day == 5 /* Saturday */) {
                    weekend = true;
                    ++this.day;
                }
                else if (this.day == 6 /* Sunday */) {
                    weekend = true;
                    this.day = 0; // it's a new week!
                }
                else {
                    ++this.day;
                }
                return weekend;
            };
        return AirWeekend;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AirLanguage = /** @class */ (function () {
        function AirLanguage(days, daysMin, months) {
            this.days = days;
            this.daysMin = daysMin;
            this.months = months;
        }
        return AirLanguage;
    }());
    /** @type {?} */
    var AIR_LANGUAGES = new Map([
        ( /** @type {?} */(['cs', new AirLanguage(['Pondělí', 'Úterý', 'Středa', 'Čtvrtek', 'Pátek', 'Sobota', 'Neděle'], ['Po', 'Út', 'St', 'Čt', 'Pá', 'So', 'Ne'], ['Leden', 'Únor', 'Březen', 'Duben', 'Květen', 'Červen', 'Červenec', 'Srpen', 'Září', 'Říjen', 'Listopad', 'Prosinec'])])),
        ( /** @type {?} */(['da', new AirLanguage(['Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag', 'Søndag'], ['Ma', 'Ti', 'On', 'To', 'Fr', 'Lø', 'Sø'], ['Januar', 'Februar', 'Marts', 'April', 'Maj', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'December'])])),
        ( /** @type {?} */(['de', new AirLanguage(['Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag', 'Sonntag'], ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'], ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'])])),
        ( /** @type {?} */(['en', new AirLanguage(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'], ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])])),
        ( /** @type {?} */(['es', new AirLanguage(['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'], ['Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sa', 'Do'], ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Augosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'])])),
        ( /** @type {?} */(['fi', new AirLanguage(['Maanantai', 'Tiistai', 'Keskiviikko', 'Torstai', 'Perjantai', 'Lauantai', 'Sunnuntai'], ['Ma', 'Ti', 'Ke', 'To', 'Pe', 'La', 'Su'], ['Tammikuu', 'Helmikuu', 'Maaliskuu', 'Huhtikuu', 'Toukokuu', 'Kesäkuu', 'Heinäkuu', 'Elokuu', 'Syyskuu', 'Lokakuu', 'Marraskuu', 'Joulukuu'])])),
        ( /** @type {?} */(['fr', new AirLanguage(['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'], ['Lu', 'Ma', 'Me', 'Je', 'Ve', 'Sa', 'Di'], ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Decembre'])])),
        ( /** @type {?} */(['hu', new AirLanguage(['Hétfő', 'Kedd', 'Szerda', 'Csütörtök', 'Péntek', 'Szombat', 'Vasárnap'], ['H', 'K', 'Sz', 'Cs', 'P', 'Sz', 'V'], ['Január', 'Február', 'Március', 'Április', 'Május', 'Június', 'Július', 'Augusztus', 'Szeptember', 'Október', 'November', 'December'])])),
        ( /** @type {?} */(['it', new AirLanguage(['Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato', 'Domenica'], ['Lu', 'Ma', 'Me', 'Gi', 'Ve', 'Sa', 'Do'], ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'])])),
        ( /** @type {?} */(['jp', new AirLanguage(['月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日', '日曜日'], ['月', '火', '水', '木', '金', '土', '日'], ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'])])),
        ( /** @type {?} */(['nl', new AirLanguage(['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag'], ['ma', 'di', 'wo', 'do', 'vr', 'za', 'zo'], ['Januari', 'Februari', 'Maart', 'April', 'Mei', 'Juni', 'Juli', 'Augustus', 'September', 'Oktober', 'November', 'December'])])),
        ( /** @type {?} */(['pl', new AirLanguage(['Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota', 'Niedziela'], ['Pn', 'Wt', 'Śr', 'Czw', 'Pt', 'So', 'Nd'], ['Styczeń', 'Luty', 'Marzec', 'Kwiecień', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpień', 'Wrzesień', 'Październik', 'Listopad', 'Grudzień'])])),
        ( /** @type {?} */(['pt', new AirLanguage(['Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado', 'Domingo'], ['Se', 'Te', 'Qa', 'Qi', 'Sx', 'Sa', 'Do'], ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'])])),
        ( /** @type {?} */(['ro', new AirLanguage(['Luni', 'Marţi', 'Miercuri', 'Joi', 'Vineri', 'Sâmbătă', 'Duminică'], ['Lu', 'Ma', 'Mi', 'Jo', 'Vi', 'Sa', 'Du'], ['Ianuarie', 'Februarie', 'Martie', 'Aprilie', 'Mai', 'Iunie', 'Iulie', 'August', 'Septembrie', 'Octombrie', 'Noiembrie', 'Decembrie'])])),
        ( /** @type {?} */(['sk', new AirLanguage(['Pondelok', 'Utorok', 'Streda', 'Štvrtok', 'Piatok', 'Sobota', 'Nedeľa'], ['Po', 'Ut', 'St', 'Št', 'Pi', 'So', 'Ne'], ['Január', 'Február', 'Marec', 'Apríl', 'Máj', 'Jún', 'Júl', 'August', 'September', 'Október', 'November', 'December'])])),
        ( /** @type {?} */(['zh', new AirLanguage(['周一', '周二', '周三', '周四', '周五', '周六', '周日'], ['一', '二', '三', '四', '五', '六', '日'], ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'])])),
    ]);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Angular2AirDatepickerComponent = /** @class */ (function () {
        function Angular2AirDatepickerComponent() {
            this.airChange = new core.EventEmitter();
            this.airMonthSelect = new core.EventEmitter();
            this.airYearSelect = new core.EventEmitter();
            this.mode = 'datepicker';
        }
        /**
         * @return {?}
         */
        Angular2AirDatepickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.airOptions = new AirOptions(this.airOptions || ( /** @type {?} */({})));
                this.airLanguage = AIR_LANGUAGES.get(this.airOptions.language);
                this.airCalendar = new AirCalendar(this.airDate, this.airOptions);
            };
        /**
         * @param {?=} index
         * @return {?}
         */
        Angular2AirDatepickerComponent.prototype.setDate = /**
         * @param {?=} index
         * @return {?}
         */
            function (index) {
                if (this.airCalendar.airDays[index]) {
                    if (this.airCalendar.airDays[index].disabled) {
                        return;
                    }
                    this.airCalendar.selectDate(index);
                }
                /** @type {?} */
                var time = Date.UTC(this.airCalendar.year, this.airCalendar.month, this.airCalendar.date, this.airCalendar.hour, this.airCalendar.minute);
                if (!this.airOptions.isDisabled(new Date(time))) {
                    this.airDate.setTime(time);
                    this.airChange.emit(this.airDate);
                }
            };
        Angular2AirDatepickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'air-datepicker',
                        template: "\n    <div class=\"datepicker-inline\">\n      <ng-container [ngSwitch]=\"mode\">\n        <div *ngSwitchCase=\"'datepicker'\"\n             datepicker\n             [airDate]=\"airDate\"\n             [airOptions]=\"airOptions\"\n             [airCalendar]=\"airCalendar\"\n             [airLanguage]=\"airLanguage\"\n             (setDate)=\"setDate($event)\"\n             (setMonth)=\"airCalendar.setMonth($event); airMonthSelect.emit($event);\"\n             (monthSelection)=\"mode = 'monthpicker'\"\n             class=\"datepicker\"></div>\n\n        <div *ngSwitchCase=\"'monthpicker'\"\n             monthpicker\n             [airCalendar]=\"airCalendar\"\n             [airLanguage]=\"airLanguage\"\n             (setMonth)=\"airCalendar.setMonth($event); airMonthSelect.emit($event); mode = 'datepicker';\"\n             (setYear)=\"airCalendar.setYear($event); airYearSelect.emit($event);\"\n             (yearSelection)=\"mode = 'yearpicker'\"\n             class=\"datepicker\"></div>\n\n        <div *ngSwitchCase=\"'yearpicker'\"\n             yearpicker\n             [airCalendar]=\"airCalendar\"\n             (setYear)=\"airCalendar.setYear($event); airYearSelect.emit($event); mode = 'monthpicker';\"\n             class=\"datepicker\"></div>\n      </ng-container>\n    </div>\n  ",
                        encapsulation: core.ViewEncapsulation.None,
                        styles: [".datepicker--cells{display:flex;flex-wrap:wrap}.datepicker--cell{border-radius:4px;box-sizing:border-box;cursor:pointer;display:flex;position:relative;align-items:center;justify-content:center;height:32px;z-index:1}.datepicker--cell.-focus-,.datepicker--cell:hover{background:#f0f0f0}.datepicker--cell.-current-{color:#4eb5e6}.datepicker--cell.-current-.-focus-{color:#4a4a4a}.datepicker--cell.-current-.-in-range-{color:#4eb5e6}.datepicker--cell.-in-range-{background:rgba(92,196,239,.1);color:#4a4a4a;border-radius:0}.datepicker--cell.-in-range-.-focus-{background-color:rgba(92,196,239,.2)}.datepicker--cell.-disabled-{cursor:default;color:#aeaeae}.datepicker--cell.-disabled-.-focus-{color:#aeaeae}.datepicker--cell.-disabled-.-in-range-{color:#a1a1a1}.datepicker--cell.-disabled-.-current-.-focus-{color:#aeaeae}.datepicker--cell.-range-from-{border:1px solid rgba(92,196,239,.5);background-color:rgba(92,196,239,.1);border-radius:4px 0 0 4px}.datepicker--cell.-range-to-{border:1px solid rgba(92,196,239,.5);background-color:rgba(92,196,239,.1);border-radius:0 4px 4px 0}.datepicker--cell.-range-from-.-range-to-{border-radius:4px}.datepicker--cell.-selected-{color:#fff;border:none;background:#5cc4ef}.datepicker--cell.-selected-.-current-{color:#fff;background:#5cc4ef}.datepicker--cell.-selected-.-focus-{background:#45bced}.datepicker--cell:empty{cursor:default}.datepicker--days-names{display:flex;flex-wrap:wrap;margin:8px 0 3px}.datepicker--day-name{color:#ff9a19;display:flex;align-items:center;justify-content:center;flex:1;text-align:center;text-transform:uppercase;font-size:.8em}.datepicker--cell-day{width:14.28571%}.datepicker--cells-months{height:170px}.datepicker--cell-month{width:33.33%;height:25%}.datepicker--cells-years,.datepicker--years{height:170px}.datepicker--cell-year{width:25%;height:33.33%}.datepickers-container{position:absolute;left:0;top:0}@media print{.datepickers-container{display:none}}.datepicker{background:#fff;border:1px solid #dbdbdb;box-shadow:0 4px 12px rgba(0,0,0,.15);border-radius:4px;box-sizing:content-box;font-family:Tahoma,sans-serif;font-size:14px;color:#4a4a4a;width:250px;position:absolute;left:-100000px;opacity:0;transition:opacity .3s,transform .3s,left .3s,-webkit-transform .3s;z-index:100}.datepicker.-from-top-{-webkit-transform:translateY(-8px);transform:translateY(-8px)}.datepicker.-from-right-{-webkit-transform:translateX(8px);transform:translateX(8px)}.datepicker.-from-bottom-{-webkit-transform:translateY(8px);transform:translateY(8px)}.datepicker.-from-left-{-webkit-transform:translateX(-8px);transform:translateX(-8px)}.datepicker.active{opacity:1;-webkit-transform:translate(0);transform:translate(0);transition:opacity .3s,transform .3s,left,-webkit-transform .3s}.datepicker-inline .datepicker{border-color:#d7d7d7;box-shadow:none;position:static;left:auto;right:auto;opacity:1;-webkit-transform:none;transform:none}.datepicker-inline .datepicker--pointer{display:none}.datepicker--content{box-sizing:content-box;padding:4px}.-only-timepicker- .datepicker--content{display:none}.datepicker--pointer{position:absolute;background:#fff;border-top:1px solid #dbdbdb;border-right:1px solid #dbdbdb;width:10px;height:10px;z-index:-1}.-top-center- .datepicker--pointer,.-top-left- .datepicker--pointer,.-top-right- .datepicker--pointer{top:calc(100% - 4px);-webkit-transform:rotate(135deg);transform:rotate(135deg)}.-right-bottom- .datepicker--pointer,.-right-center- .datepicker--pointer,.-right-top- .datepicker--pointer{right:calc(100% - 4px);-webkit-transform:rotate(225deg);transform:rotate(225deg)}.-bottom-center- .datepicker--pointer,.-bottom-left- .datepicker--pointer,.-bottom-right- .datepicker--pointer{bottom:calc(100% - 4px);-webkit-transform:rotate(315deg);transform:rotate(315deg)}.-left-bottom- .datepicker--pointer,.-left-center- .datepicker--pointer,.-left-top- .datepicker--pointer{left:calc(100% - 4px);-webkit-transform:rotate(45deg);transform:rotate(45deg)}.-bottom-left- .datepicker--pointer,.-top-left- .datepicker--pointer{left:10px}.-bottom-right- .datepicker--pointer,.-top-right- .datepicker--pointer{right:10px}.-bottom-center- .datepicker--pointer,.-top-center- .datepicker--pointer{left:calc(50% - 10px / 2)}.-left-top- .datepicker--pointer,.-right-top- .datepicker--pointer{top:10px}.-left-bottom- .datepicker--pointer,.-right-bottom- .datepicker--pointer{bottom:10px}.-left-center- .datepicker--pointer,.-right-center- .datepicker--pointer{top:calc(50% - 10px / 2)}.datepicker--body{display:none}.datepicker--body.active{display:block}.datepicker--nav{display:flex;justify-content:space-between;border-bottom:1px solid #efefef;min-height:32px;padding:4px}.-only-timepicker- .datepicker--nav{display:none}.datepicker--nav-action,.datepicker--nav-title{display:flex;cursor:pointer;align-items:center;justify-content:center}.datepicker--nav-action{width:32px;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.datepicker--nav-action:hover{background:#f0f0f0}.datepicker--nav-action.-disabled-{visibility:hidden}.datepicker--nav-action svg{width:32px;height:32px}.datepicker--nav-action path{fill:none;stroke:#9c9c9c;stroke-width:2px}.datepicker--nav-title{border-radius:4px;padding:0 8px}.datepicker--nav-title i{font-style:normal;color:#9c9c9c;margin-left:5px}.datepicker--nav-title:hover{background:#f0f0f0}.datepicker--nav-title.-disabled-{cursor:default;background:0 0}.datepicker--buttons{display:flex;padding:4px;border-top:1px solid #efefef}.datepicker--button{color:#4eb5e6;cursor:pointer;border-radius:4px;flex:1;display:inline-flex;justify-content:center;align-items:center;height:32px}.datepicker--button:hover{color:#4a4a4a;background:#f0f0f0}.datepicker--time{border-top:1px solid #efefef;display:flex;align-items:center;padding:4px;position:relative}.datepicker--time.-am-pm- .datepicker--time-sliders{flex:0 1 138px;max-width:138px}.-only-timepicker- .datepicker--time{border-top:none}.datepicker--time-sliders{flex:0 1 153px;margin-right:10px;max-width:153px}.datepicker--time-label{display:none;font-size:12px}.datepicker--time-current{display:flex;align-items:center;flex:1;font-size:14px;text-align:center;margin:0 0 0 10px}.datepicker--time-current-colon{margin:0 2px 3px;line-height:1}.datepicker--time-current-hours,.datepicker--time-current-minutes{line-height:1;font-size:19px;font-family:\"Century Gothic\",CenturyGothic,AppleGothic,sans-serif;position:relative;z-index:1}.datepicker--time-current-hours:after,.datepicker--time-current-minutes:after{content:'';background:#f0f0f0;border-radius:4px;position:absolute;left:-2px;top:-3px;right:-2px;bottom:-2px;z-index:-1;opacity:0}.datepicker--time-current-hours.-focus-:after,.datepicker--time-current-minutes.-focus-:after{opacity:1}.datepicker--time-current-ampm{text-transform:uppercase;align-self:flex-end;color:#9c9c9c;margin-left:6px;font-size:11px;margin-bottom:1px}.datepicker--time-row{display:flex;align-items:center;font-size:11px;height:17px;background:linear-gradient(to right,#dedede,#dedede) left 50%/100% 1px no-repeat}.datepicker--time-row:first-child{margin-bottom:4px}.datepicker--time-row input[type=range]{background:0 0;cursor:pointer;flex:1;height:100%;max-width:100%;padding:0;margin:0;-webkit-appearance:none}.datepicker--time-row input[type=range]::-webkit-slider-thumb{-webkit-appearance:none;box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid #dedede;background:#fff;cursor:pointer;transition:background .2s;margin-top:-6px}.datepicker--time-row input[type=range]::-ms-tooltip{display:none}.datepicker--time-row input[type=range]:hover::-webkit-slider-thumb{border-color:#b8b8b8}.datepicker--time-row input[type=range]:hover::-moz-range-thumb{border-color:#b8b8b8}.datepicker--time-row input[type=range]:hover::-ms-thumb{border-color:#b8b8b8}.datepicker--time-row input[type=range]:focus{outline:0}.datepicker--time-row input[type=range]:focus::-webkit-slider-thumb{background:#5cc4ef;border-color:#5cc4ef}.datepicker--time-row input[type=range]:focus::-moz-range-thumb{background:#5cc4ef;border-color:#5cc4ef}.datepicker--time-row input[type=range]:focus::-ms-thumb{background:#5cc4ef;border-color:#5cc4ef}.datepicker--time-row input[type=range]::-moz-range-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid #dedede;background:#fff;cursor:pointer;transition:background .2s}.datepicker--time-row input[type=range]::-ms-thumb{box-sizing:border-box;height:12px;width:12px;border-radius:3px;border:1px solid #dedede;background:#fff;cursor:pointer;transition:background .2s}.datepicker--time-row input[type=range]::-webkit-slider-runnable-track{border:none;height:1px;cursor:pointer;color:transparent;background:0 0}.datepicker--time-row input[type=range]::-moz-range-track{border:none;height:1px;cursor:pointer;color:transparent;background:0 0}.datepicker--time-row input[type=range]::-ms-track{border:none;height:1px;cursor:pointer;color:transparent;background:0 0}.datepicker--time-row input[type=range]::-ms-fill-lower{background:0 0}.datepicker--time-row input[type=range]::-ms-fill-upper{background:0 0}.datepicker--time-row span{padding:0 12px}.datepicker--time-icon{color:#9c9c9c;border:1px solid;border-radius:50%;font-size:16px;position:relative;margin:0 5px -1px 0;width:1em;height:1em}.datepicker--time-icon:after,.datepicker--time-icon:before{content:'';background:currentColor;position:absolute}.datepicker--time-icon:after{height:.4em;width:1px;left:calc(50% - 1px);top:calc(50% + 1px);-webkit-transform:translateY(-100%);transform:translateY(-100%)}.datepicker--time-icon:before{width:.4em;height:1px;top:calc(50% + 1px);left:calc(50% - 1px)}.datepicker--cell-day.-other-month-,.datepicker--cell-year.-other-decade-{color:#dedede}.datepicker--cell-day.-other-month-:hover,.datepicker--cell-year.-other-decade-:hover{color:#c5c5c5}.-disabled-.-focus-.datepicker--cell-day.-other-month-,.-disabled-.-focus-.datepicker--cell-year.-other-decade-{color:#dedede}.-selected-.datepicker--cell-day.-other-month-,.-selected-.datepicker--cell-year.-other-decade-{color:#fff;background:#a2ddf6}.-selected-.-focus-.datepicker--cell-day.-other-month-,.-selected-.-focus-.datepicker--cell-year.-other-decade-{background:#8ad5f4}.-in-range-.datepicker--cell-day.-other-month-,.-in-range-.datepicker--cell-year.-other-decade-{background-color:rgba(92,196,239,.1);color:#ccc}.-in-range-.-focus-.datepicker--cell-day.-other-month-,.-in-range-.-focus-.datepicker--cell-year.-other-decade-{background-color:rgba(92,196,239,.2)}.datepicker--cell-day.-other-month-:empty,.datepicker--cell-year.-other-decade-:empty{background:0 0;border:none}"]
                    }] }
        ];
        Angular2AirDatepickerComponent.propDecorators = {
            airOptions: [{ type: core.Input }],
            airDate: [{ type: core.Input }],
            airChange: [{ type: core.Output }],
            airMonthSelect: [{ type: core.Output }],
            airYearSelect: [{ type: core.Output }]
        };
        return Angular2AirDatepickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DatepickerComponent = /** @class */ (function () {
        function DatepickerComponent() {
            this.setDate = new core.EventEmitter();
            this.setMonth = new core.EventEmitter();
            this.monthSelection = new core.EventEmitter();
        }
        DatepickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: '[datepicker]',
                        template: "\n    <nav class=\"datepicker--nav\">\n      <div class=\"datepicker--nav-action\" (click)=\"setMonth.emit(airCalendar.month - 1)\"><svg><path d=\"M 17,12 l -5,5 l 5,5\"></path></svg></div>\n\n      <div (click)=\"monthSelection.emit()\" class=\"datepicker--nav-title\">{{airLanguage.months[airCalendar.month]}}, <i>{{airCalendar.year}}</i></div>\n\n      <div class=\"datepicker--nav-action\" (click)=\"setMonth.emit(airCalendar.month + 1)\"><svg><path d=\"M 14,12 l 5,5 l -5,5\"></path></svg></div>\n    </nav>\n\n    <div class=\"datepicker--content\">\n      <div class=\"datepicker--days datepicker--body active\">\n        <div class=\"datepicker--days-names\">\n          <div *ngFor=\"let day of [0,1,2,3,4,5,6]\" class=\"datepicker--day-name\" [class.-weekend-]=\"day == 5 || day == 6\"\n          >{{airLanguage[airOptions.fullDays ? 'days' : 'daysMin'][day]}}</div>\n        </div>\n\n        <div class=\"datepicker--cells datepicker--cells-days\">\n          <div *ngFor=\"let airDay of airCalendar.airDays; let i=index\"\n               class=\"datepicker--cell datepicker--cell-day\"\n               [ngClass]=\"{ '-weekend-': airDay.weekend,\n                            '-other-month-': airDay.other,\n                            '-current-': airDay.current,\n                            '-selected-':\n                            airDate.getUTCFullYear() == airCalendar.year\n                            && airDate.getUTCMonth() == airCalendar.month\n                            && airDate.getUTCDate() == airDay.date\n                            && !airDay.other,\n                            '-disabled-': airDay.disabled }\"\n               (click)=\"setDate.emit(i)\">{{airDay.date}}</div>\n        </div>\n      </div>\n\n      <div *ngIf=\"airOptions.timepicker\"\n           timepicker\n           [airOptions]=\"airOptions\" [airCalendar]=\"airCalendar\" (setDate)=\"setDate.emit(null)\" class=\"datepicker--time -am-pm-\"></div>\n    </div>\n  "
                    }] }
        ];
        DatepickerComponent.propDecorators = {
            airDate: [{ type: core.Input }],
            airOptions: [{ type: core.Input }],
            airCalendar: [{ type: core.Input }],
            airLanguage: [{ type: core.Input }],
            setDate: [{ type: core.Output }],
            setMonth: [{ type: core.Output }],
            monthSelection: [{ type: core.Output }]
        };
        return DatepickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TimepickerComponent = /** @class */ (function () {
        function TimepickerComponent() {
            this.setDate = new core.EventEmitter();
        }
        TimepickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: '[timepicker]',
                        template: "\n    <div class=\"datepicker--time-current\">\n            <span class=\"datepicker--time-current-hours\"\n            >{{('0' + (!airOptions.format12h ? airCalendar.hour : (airCalendar.hour <= 12 ? airCalendar.hour : airCalendar.hour - 12))).slice(-2)}}</span>\n      <span class=\"datepicker--time-current-colon\">:</span>\n      <span class=\"datepicker--time-current-minutes\">{{('0' + airCalendar.minute).slice(-2)}}</span>\n      <span *ngIf=\"airOptions.format12h\" class=\"datepicker--time-current-ampm\">{{airCalendar.hour < 12 ? 'AM' : 'PM'}}</span>\n    </div>\n\n    <div class=\"datepicker--time-sliders\">\n      <div class=\"datepicker--time-row\">\n        <input type=\"range\" name=\"hours\" min=\"0\" max=\"23\" step=\"{{airOptions.hourStep}}\" [(ngModel)]=\"airCalendar.hour\" (change)=\"setDate.emit()\">\n      </div>\n\n      <div class=\"datepicker--time-row\">\n        <input type=\"range\" name=\"minutes\" min=\"0\" max=\"59\" step=\"{{airOptions.minuteStep}}\" [(ngModel)]=\"airCalendar.minute\" (change)=\"setDate.emit()\">\n      </div>\n    </div>\n  "
                    }] }
        ];
        TimepickerComponent.propDecorators = {
            airOptions: [{ type: core.Input }],
            airCalendar: [{ type: core.Input }],
            setDate: [{ type: core.Output }]
        };
        return TimepickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MonthpickerComponent = /** @class */ (function () {
        function MonthpickerComponent() {
            this.setMonth = new core.EventEmitter();
            this.setYear = new core.EventEmitter();
            this.yearSelection = new core.EventEmitter();
        }
        MonthpickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: '[monthpicker]',
                        template: "\n    <nav class=\"datepicker--nav\">\n      <div class=\"datepicker--nav-action\" (click)=\"setYear.emit(airCalendar.year - 1)\"><svg><path d=\"M 17,12 l -5,5 l 5,5\"></path></svg></div>\n\n      <div (click)=\"yearSelection.emit()\" class=\"datepicker--nav-title\">{{airCalendar.year}}</div>\n\n      <div class=\"datepicker--nav-action\" (click)=\"setYear.emit(airCalendar.year + 1)\"><svg><path d=\"M 14,12 l 5,5 l -5,5\"></path></svg></div>\n    </nav>\n\n    <div class=\"datepicker--content\">\n      <div class=\"datepicker--months datepicker--body active\">\n        <div class=\"datepicker--cells datepicker--cells-months\">\n          <div *ngFor=\"let month of airLanguage.months; let i=index\"\n               (click)=\"setMonth.emit(i)\"\n               class=\"datepicker--cell datepicker--cell-month\"\n               [ngClass]=\"{ '-current-': airCalendar.year == airCalendar.currentYear && i == airCalendar.currentMonth }\">{{month}}</div>\n        </div>\n      </div>\n    </div>\n  "
                    }] }
        ];
        MonthpickerComponent.propDecorators = {
            airCalendar: [{ type: core.Input }],
            airLanguage: [{ type: core.Input }],
            setMonth: [{ type: core.Output }],
            setYear: [{ type: core.Output }],
            yearSelection: [{ type: core.Output }]
        };
        return MonthpickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YearpickerComponent = /** @class */ (function () {
        function YearpickerComponent() {
            this.setYear = new core.EventEmitter();
            this.years = [];
        }
        /**
         * @return {?}
         */
        YearpickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var firstYear = this.airCalendar.year - 6;
                this.years = Array.from({ length: 12 }, function (v, k) { return firstYear + k; });
            };
        /**
         * @return {?}
         */
        YearpickerComponent.prototype.next = /**
         * @return {?}
         */
            function () {
                for (var i = 0; i < this.years.length; i++) {
                    this.years[i] += 10;
                }
            };
        /**
         * @return {?}
         */
        YearpickerComponent.prototype.previous = /**
         * @return {?}
         */
            function () {
                for (var i = 0; i < this.years.length; i++) {
                    this.years[i] -= 10;
                }
            };
        YearpickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: '[yearpicker]',
                        template: "\n    <nav class=\"datepicker--nav\">\n      <div class=\"datepicker--nav-action\" (click)=\"previous()\"><svg><path d=\"M 17,12 l -5,5 l 5,5\"></path></svg></div>\n\n      <div class=\"datepicker--nav-title\">{{years[1]}} - {{years[years.length - 2]}}</div>\n\n      <div class=\"datepicker--nav-action\" (click)=\"next()\"><svg><path d=\"M 14,12 l 5,5 l -5,5\"></path></svg></div>\n    </nav>\n\n    <div class=\"datepicker--content\">\n      <div class=\"datepicker--cells datepicker--cells-years\">\n        <div *ngFor=\"let year of years; let i=index\" (click)=\"setYear.emit(year)\" class=\"datepicker--cell datepicker--cell-year\"\n             [ngClass]=\"{ '-current-': year == airCalendar.currentYear, '-other-decade-': i == 0 || i == years.length - 1 }\">{{year}}</div>\n      </div>\n    </div>\n  "
                    }] }
        ];
        YearpickerComponent.propDecorators = {
            airCalendar: [{ type: core.Input }],
            setYear: [{ type: core.Output }]
        };
        return YearpickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var components = [
        DatepickerComponent,
        TimepickerComponent,
        MonthpickerComponent,
        YearpickerComponent
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Angular2AirDatepickerModule = /** @class */ (function () {
        function Angular2AirDatepickerModule() {
        }
        Angular2AirDatepickerModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule
                        ],
                        declarations: [
                            Angular2AirDatepickerComponent,
                            components
                        ],
                        exports: [
                            Angular2AirDatepickerComponent
                        ]
                    },] }
        ];
        return Angular2AirDatepickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.Angular2AirDatepickerComponent = Angular2AirDatepickerComponent;
    exports.Angular2AirDatepickerModule = Angular2AirDatepickerModule;
    exports.AirCalendar = AirCalendar;
    exports.AirMonth = AirMonth;
    exports.AirDay = AirDay;
    exports.AirWeekend = AirWeekend;
    exports.AirLanguage = AirLanguage;
    exports.AIR_LANGUAGES = AIR_LANGUAGES;
    exports.AirOptions = AirOptions;
    exports.ɵb = DatepickerComponent;
    exports.ɵa = components;
    exports.ɵd = MonthpickerComponent;
    exports.ɵc = TimepickerComponent;
    exports.ɵe = YearpickerComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=angular2-air-datepicker.umd.js.map