/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AirOptions } from './options';
var AirCalendar = /** @class */ (function () {
    function AirCalendar(date, airOptions) {
        if (date === void 0) { date = new Date; }
        if (airOptions === void 0) { airOptions = new AirOptions; }
        this.daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        /** @type {?} */
        var currentDate = new Date;
        this.currentMonth = currentDate.getMonth();
        this.currentYear = currentDate.getFullYear();
        this.airOptions = airOptions;
        this.year = date.getFullYear();
        this.month = date.getMonth();
        this.date = date.getDate();
        this.hour = date.getHours();
        this.minute = date.getMinutes();
        this.updateCalendar();
    }
    /**
     * @return {?}
     */
    AirCalendar.prototype.updateCalendar = /**
     * @return {?}
     */
    function () {
        this.airDays = [];
        /** @type {?} */
        var daysInMonth = this.getDaysInMonth(this.month);
        /** @type {?} */
        var date = new Date;
        /** @type {?} */
        var firstDayOfMonth = ((new Date(this.year, this.month, 1)).getDay() || 7) - 1;
        // making 0 == monday
        /** @type {?} */
        var weekend = new AirWeekend;
        if (firstDayOfMonth /* is not monday (0) */) {
            /** @type {?} */
            var daysInLastMonth = this.getDaysInMonth(this.month - 1);
            /** @type {?} */
            var prevAirMonth = new AirMonth(this.month - 1, this.year);
            for (var dateNo = daysInLastMonth - firstDayOfMonth + 1; dateNo <= daysInLastMonth; dateNo++) {
                this.airDays.push(new AirDay(dateNo, weekend.progress(), this.airOptions.isDisabled(new Date(prevAirMonth.year, prevAirMonth.month, dateNo)), true));
            }
        }
        for (var dateNo = 1; dateNo <= daysInMonth; dateNo++) {
            this.airDays.push(new AirDay(dateNo, weekend.progress(), this.airOptions.isDisabled(new Date(this.year, this.month, dateNo))));
        }
        if (this.date > daysInMonth) {
            this.date = daysInMonth; // select the maximum available this month instead
        }
        // set the current date if it's the current month & year
        if (date.getMonth() == this.month && date.getFullYear() == this.year) {
            this.airDays[firstDayOfMonth + date.getDate() - 1].current = true;
        }
        /** @type {?} */
        var daysSoFar = firstDayOfMonth + daysInMonth;
        /** @type {?} */
        var nextAirMonth = new AirMonth(this.month + 1, this.year);
        for (var dateNo = 1; dateNo <= (daysSoFar > 35 ? 42 : 35) - daysSoFar; dateNo++) {
            this.airDays.push(new AirDay(dateNo, weekend.progress(), this.airOptions.isDisabled(new Date(nextAirMonth.year, nextAirMonth.month, dateNo)), true));
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    AirCalendar.prototype.selectDate = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.date = this.airDays[index].date;
        // might be a day from the previous/next month
        if (index < 7 && this.date > 20) {
            this.setMonth(this.month - 1);
        }
        else if (index > 20 && this.date < 8) {
            this.setMonth(this.month + 1);
        }
    };
    /**
     * @param {?} month
     * @return {?}
     */
    AirCalendar.prototype.setMonth = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        /** @type {?} */
        var airMonth = new AirMonth(month, this.year);
        this.month = airMonth.month;
        this.year = airMonth.year;
        this.updateCalendar();
    };
    /**
     * @param {?} year
     * @return {?}
     */
    AirCalendar.prototype.setYear = /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.year = year;
    };
    /**
     * @param {?} month
     * @return {?}
     */
    AirCalendar.prototype.getDaysInMonth = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        /** @type {?} */
        var airMonth = new AirMonth(month, this.year);
        if (airMonth.month == 1 && ((airMonth.year % 4 == 0) && (airMonth.year % 100 != 0)) || (airMonth.year % 400 == 0)) {
            return 29;
        }
        return this.daysInMonth[airMonth.month];
    };
    return AirCalendar;
}());
export { AirCalendar };
if (false) {
    /** @type {?} */
    AirCalendar.prototype.daysInMonth;
    /** @type {?} */
    AirCalendar.prototype.airOptions;
    /** @type {?} */
    AirCalendar.prototype.airDays;
    /** @type {?} */
    AirCalendar.prototype.currentMonth;
    /** @type {?} */
    AirCalendar.prototype.currentYear;
    /** @type {?} */
    AirCalendar.prototype.year;
    /** @type {?} */
    AirCalendar.prototype.month;
    /** @type {?} */
    AirCalendar.prototype.date;
    /** @type {?} */
    AirCalendar.prototype.hour;
    /** @type {?} */
    AirCalendar.prototype.minute;
}
// normalizes month/year
var 
// normalizes month/year
AirMonth = /** @class */ (function () {
    function AirMonth(month, year) {
        if (month > 11) {
            year++;
            month = 0;
        }
        else if (month < 0) {
            year--;
            month = 11;
        }
        this.month = month;
        this.year = year;
    }
    return AirMonth;
}());
// normalizes month/year
export { AirMonth };
if (false) {
    /** @type {?} */
    AirMonth.prototype.month;
    /** @type {?} */
    AirMonth.prototype.year;
}
var AirDay = /** @class */ (function () {
    function AirDay(date, weekend, disabled, other, current) {
        if (weekend === void 0) { weekend = false; }
        if (disabled === void 0) { disabled = false; }
        if (other === void 0) { other = false; }
        if (current === void 0) { current = false; }
        this.date = date;
        this.weekend = weekend;
        this.disabled = disabled;
        this.other = other;
        this.current = current;
    }
    return AirDay;
}());
export { AirDay };
if (false) {
    /** @type {?} */
    AirDay.prototype.date;
    /** @type {?} */
    AirDay.prototype.weekend;
    /** @type {?} */
    AirDay.prototype.other;
    /** @type {?} */
    AirDay.prototype.current;
    /** @type {?} */
    AirDay.prototype.disabled;
}
var AirWeekend = /** @class */ (function () {
    function AirWeekend(day) {
        if (day === void 0) { day = 0; }
        this.day = day;
    }
    /**
     * @return {?}
     */
    AirWeekend.prototype.progress = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var weekend = false;
        if (this.day == 5 /* Saturday */) {
            weekend = true;
            ++this.day;
        }
        else if (this.day == 6 /* Sunday */) {
            weekend = true;
            this.day = 0; // it's a new week!
        }
        else {
            ++this.day;
        }
        return weekend;
    };
    return AirWeekend;
}());
export { AirWeekend };
if (false) {
    /** @type {?} */
    AirWeekend.prototype.day;
}
//# sourceMappingURL=data:application/json;base64,