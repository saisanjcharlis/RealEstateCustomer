/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { AirCalendar, AirLanguage } from '../../classes';
var MonthpickerComponent = /** @class */ (function () {
    function MonthpickerComponent() {
        this.setMonth = new EventEmitter();
        this.setYear = new EventEmitter();
        this.yearSelection = new EventEmitter();
    }
    MonthpickerComponent.decorators = [
        { type: Component, args: [{
                    selector: '[monthpicker]',
                    template: "\n    <nav class=\"datepicker--nav\">\n      <div class=\"datepicker--nav-action\" (click)=\"setYear.emit(airCalendar.year - 1)\"><svg><path d=\"M 17,12 l -5,5 l 5,5\"></path></svg></div>\n\n      <div (click)=\"yearSelection.emit()\" class=\"datepicker--nav-title\">{{airCalendar.year}}</div>\n\n      <div class=\"datepicker--nav-action\" (click)=\"setYear.emit(airCalendar.year + 1)\"><svg><path d=\"M 14,12 l 5,5 l -5,5\"></path></svg></div>\n    </nav>\n\n    <div class=\"datepicker--content\">\n      <div class=\"datepicker--months datepicker--body active\">\n        <div class=\"datepicker--cells datepicker--cells-months\">\n          <div *ngFor=\"let month of airLanguage.months; let i=index\"\n               (click)=\"setMonth.emit(i)\"\n               class=\"datepicker--cell datepicker--cell-month\"\n               [ngClass]=\"{ '-current-': airCalendar.year == airCalendar.currentYear && i == airCalendar.currentMonth }\">{{month}}</div>\n        </div>\n      </div>\n    </div>\n  "
                }] }
    ];
    MonthpickerComponent.propDecorators = {
        airCalendar: [{ type: Input }],
        airLanguage: [{ type: Input }],
        setMonth: [{ type: Output }],
        setYear: [{ type: Output }],
        yearSelection: [{ type: Output }]
    };
    return MonthpickerComponent;
}());
export { MonthpickerComponent };
if (false) {
    /** @type {?} */
    MonthpickerComponent.prototype.airCalendar;
    /** @type {?} */
    MonthpickerComponent.prototype.airLanguage;
    /** @type {?} */
    MonthpickerComponent.prototype.setMonth;
    /** @type {?} */
    MonthpickerComponent.prototype.setYear;
    /** @type {?} */
    MonthpickerComponent.prototype.yearSelection;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGhwaWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItYWlyLWRhdGVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9tb250aHBpY2tlci9tb250aHBpY2tlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHekQ7SUFBQTtRQTJCWSxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUN0QyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUNyQyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFDckQsQ0FBQzs7Z0JBOUJBLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLDYrQkFtQlQ7aUJBQ0Y7Ozs4QkFFRSxLQUFLOzhCQUNMLEtBQUs7MkJBRUwsTUFBTTswQkFDTixNQUFNO2dDQUNOLE1BQU07O0lBQ1QsMkJBQUM7Q0FBQSxBQTlCRCxJQThCQztTQVBZLG9CQUFvQjs7O0lBQy9CLDJDQUFrQzs7SUFDbEMsMkNBQWtDOztJQUVsQyx3Q0FBZ0Q7O0lBQ2hELHVDQUErQzs7SUFDL0MsNkNBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFpckNhbGVuZGFyLCBBaXJMYW5ndWFnZSB9IGZyb20gJy4uLy4uL2NsYXNzZXMnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1ttb250aHBpY2tlcl0nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuYXYgY2xhc3M9XCJkYXRlcGlja2VyLS1uYXZcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1uYXYtYWN0aW9uXCIgKGNsaWNrKT1cInNldFllYXIuZW1pdChhaXJDYWxlbmRhci55ZWFyIC0gMSlcIj48c3ZnPjxwYXRoIGQ9XCJNIDE3LDEyIGwgLTUsNSBsIDUsNVwiPjwvcGF0aD48L3N2Zz48L2Rpdj5cblxuICAgICAgPGRpdiAoY2xpY2spPVwieWVhclNlbGVjdGlvbi5lbWl0KClcIiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdi10aXRsZVwiPnt7YWlyQ2FsZW5kYXIueWVhcn19PC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1uYXYtYWN0aW9uXCIgKGNsaWNrKT1cInNldFllYXIuZW1pdChhaXJDYWxlbmRhci55ZWFyICsgMSlcIj48c3ZnPjxwYXRoIGQ9XCJNIDE0LDEyIGwgNSw1IGwgLTUsNVwiPjwvcGF0aD48L3N2Zz48L2Rpdj5cbiAgICA8L25hdj5cblxuICAgIDxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jb250ZW50XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tbW9udGhzIGRhdGVwaWNrZXItLWJvZHkgYWN0aXZlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jZWxscyBkYXRlcGlja2VyLS1jZWxscy1tb250aHNcIj5cbiAgICAgICAgICA8ZGl2ICpuZ0Zvcj1cImxldCBtb250aCBvZiBhaXJMYW5ndWFnZS5tb250aHM7IGxldCBpPWluZGV4XCJcbiAgICAgICAgICAgICAgIChjbGljayk9XCJzZXRNb250aC5lbWl0KGkpXCJcbiAgICAgICAgICAgICAgIGNsYXNzPVwiZGF0ZXBpY2tlci0tY2VsbCBkYXRlcGlja2VyLS1jZWxsLW1vbnRoXCJcbiAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInsgJy1jdXJyZW50LSc6IGFpckNhbGVuZGFyLnllYXIgPT0gYWlyQ2FsZW5kYXIuY3VycmVudFllYXIgJiYgaSA9PSBhaXJDYWxlbmRhci5jdXJyZW50TW9udGggfVwiPnt7bW9udGh9fTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIE1vbnRocGlja2VyQ29tcG9uZW50IHtcbiAgQElucHV0KCkgYWlyQ2FsZW5kYXI6IEFpckNhbGVuZGFyO1xuICBASW5wdXQoKSBhaXJMYW5ndWFnZTogQWlyTGFuZ3VhZ2U7XG5cbiAgQE91dHB1dCgpIHNldE1vbnRoID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG4gIEBPdXRwdXQoKSBzZXRZZWFyID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG4gIEBPdXRwdXQoKSB5ZWFyU2VsZWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xufVxuIl19