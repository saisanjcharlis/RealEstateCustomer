{"version":3,"sources":["ng://bn-ng-idle/lib/bn-ng-idle.service.ts","ng://bn-ng-idle/lib/bn-ng-idle.module.ts"],"names":["BnNgIdleService","this","expired$","Subject","prototype","startWatching","timeOutSeconds","_this","idle$","merge","fromEvent","document","window","timeOutMilliSeconds","idleSubscription","subscribe","res","resetTimer","startTimer","timer$","timer","next","unsubscribe","stopTimer","Injectable","args","providedIn","BnNgIdleModule","NgModule","imports","declarations","providers","exports"],"mappings":"4SAAA,IAAAA,EAAA,WAgBE,SAAAA,IAFOC,KAAAC,SAA6B,IAAIC,EAAAA,eAMjCH,EAAAI,UAAAC,cAAP,SAAqBC,GAArB,IAAAC,EAAAN,KAsBE,OArBAA,KAAKO,MAAQC,EAAAA,MACXC,EAAAA,UAAUC,SAAU,aACpBD,EAAAA,UAAUC,SAAU,SACpBD,EAAAA,UAAUC,SAAU,aACpBD,EAAAA,UAAUC,SAAU,YACpBD,EAAAA,UAAUC,SAAU,kBACpBD,EAAAA,UAAUC,SAAU,cACpBD,EAAAA,UAAUC,SAAU,aACpBD,EAAAA,UAAUC,SAAU,iBACpBD,EAAAA,UAAUE,OAAQ,aAClBF,EAAAA,UAAUE,OAAQ,WAGpBX,KAAKY,oBAAuC,IAAjBP,EAE3BL,KAAKa,iBAAmBb,KAAKO,MAAMO,UAAS,SAAEC,GAC5CT,EAAKU,eAGPhB,KAAKiB,aAEEjB,KAAKC,UAGNF,EAAAI,UAAAc,WAAR,WAAA,IAAAX,EAAAN,KACCA,KAAKkB,OAASC,EAAAA,MAAMnB,KAAKY,oBAAqBZ,KAAKY,qBAAqBE,UAAS,SAAEC,GAChFT,EAAKL,SAASmB,MAAK,MAIhBrB,EAAAI,UAAAa,WAAP,WACEhB,KAAKkB,OAAOG,cACZrB,KAAKiB,cAGAlB,EAAAI,UAAAmB,UAAP,WACEtB,KAAKkB,OAAOG,cACZrB,KAAKa,iBAAiBQ,mCAtDzBE,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJALd,GCAA,IAAAC,EAAA,WAGA,SAAAA,KAO8B,2BAP7BC,EAAAA,SAAQH,KAAA,CAAC,CACRI,QAAS,GAETC,aAAc,GACdC,UAAW,CAAC/B,GACZgC,QAAS,OAEmBL,EAV9B","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, fromEvent, merge, Subject, timer } from 'rxjs';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BnNgIdleService {\r\n\r\n  private idle$: Observable<any>;\r\n  private timer$;\r\n  private timeOutMilliSeconds: number;\r\n  private idleSubscription;\r\n\r\n  public expired$: Subject<boolean> = new Subject<boolean>();\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  public startWatching(timeOutSeconds): Observable<any> {\r\n    this.idle$ = merge(\r\n      fromEvent(document, 'mousemove'),\r\n      fromEvent(document, 'click'),\r\n      fromEvent(document, 'mousedown'),\r\n      fromEvent(document, 'keypress'),\r\n      fromEvent(document, 'DOMMouseScroll'),\r\n      fromEvent(document, 'mousewheel'),\r\n      fromEvent(document, 'touchmove'),\r\n      fromEvent(document, 'MSPointerMove'),\r\n      fromEvent(window, 'mousemove'),\r\n      fromEvent(window, 'resize'),\r\n    );\r\n\r\n    this.timeOutMilliSeconds = timeOutSeconds * 1000;\r\n\r\n    this.idleSubscription = this.idle$.subscribe((res) => {\r\n      this.resetTimer();\r\n    });\r\n\r\n    this.startTimer();\r\n\r\n    return this.expired$;\r\n  }\r\n\r\n  private startTimer() {\r\n   this.timer$ = timer(this.timeOutMilliSeconds, this.timeOutMilliSeconds).subscribe((res) => {\r\n      this.expired$.next(true);\r\n    });\r\n  }\r\n\r\n  public resetTimer() {\r\n    this.timer$.unsubscribe();\r\n    this.startTimer();\r\n  }\r\n\r\n  public stopTimer() {\r\n    this.timer$.unsubscribe();\r\n    this.idleSubscription.unsubscribe();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BnNgIdleService } from './bn-ng-idle.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [],\r\n  providers: [BnNgIdleService],\r\n  exports: []\r\n})\r\nexport class BnNgIdleModule { }\r\n"]}