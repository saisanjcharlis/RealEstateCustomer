{"version":3,"file":"bn-ng-idle.js","sources":["ng://bn-ng-idle/lib/bn-ng-idle.service.ts","ng://bn-ng-idle/lib/bn-ng-idle.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, fromEvent, merge, Subject, timer } from 'rxjs';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BnNgIdleService {\r\n\r\n  private idle$: Observable<any>;\r\n  private timer$;\r\n  private timeOutMilliSeconds: number;\r\n  private idleSubscription;\r\n\r\n  public expired$: Subject<boolean> = new Subject<boolean>();\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  public startWatching(timeOutSeconds): Observable<any> {\r\n    this.idle$ = merge(\r\n      fromEvent(document, 'mousemove'),\r\n      fromEvent(document, 'click'),\r\n      fromEvent(document, 'mousedown'),\r\n      fromEvent(document, 'keypress'),\r\n      fromEvent(document, 'DOMMouseScroll'),\r\n      fromEvent(document, 'mousewheel'),\r\n      fromEvent(document, 'touchmove'),\r\n      fromEvent(document, 'MSPointerMove'),\r\n      fromEvent(window, 'mousemove'),\r\n      fromEvent(window, 'resize'),\r\n    );\r\n\r\n    this.timeOutMilliSeconds = timeOutSeconds * 1000;\r\n\r\n    this.idleSubscription = this.idle$.subscribe((res) => {\r\n      this.resetTimer();\r\n    });\r\n\r\n    this.startTimer();\r\n\r\n    return this.expired$;\r\n  }\r\n\r\n  private startTimer() {\r\n   this.timer$ = timer(this.timeOutMilliSeconds, this.timeOutMilliSeconds).subscribe((res) => {\r\n      this.expired$.next(true);\r\n    });\r\n  }\r\n\r\n  public resetTimer() {\r\n    this.timer$.unsubscribe();\r\n    this.startTimer();\r\n  }\r\n\r\n  public stopTimer() {\r\n    this.timer$.unsubscribe();\r\n    this.idleSubscription.unsubscribe();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BnNgIdleService } from './bn-ng-idle.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [],\r\n  providers: [BnNgIdleService],\r\n  exports: []\r\n})\r\nexport class BnNgIdleModule { }\r\n"],"names":[],"mappings":";;;;;;;AAAA;IAgBE;QAFO,aAAQ,GAAqB,IAAI,OAAO,EAAW,CAAC;KAI1D;;;;;IAEM,uCAAa;;;;IAApB,UAAqB,cAAc;QAAnC,iBAuBC;QAtBC,IAAI,CAAC,KAAK,GAAG,KAAK,CAChB,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,EAChC,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,EAC5B,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,EAChC,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,EAC/B,SAAS,CAAC,QAAQ,EAAE,gBAAgB,CAAC,EACrC,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC,EACjC,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,EAChC,SAAS,CAAC,QAAQ,EAAE,eAAe,CAAC,EACpC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,EAC9B,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAC5B,CAAC;QAEF,IAAI,CAAC,mBAAmB,GAAG,cAAc,GAAG,IAAI,CAAC;QAEjD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS;;;;QAAC,UAAC,GAAG;YAC/C,KAAI,CAAC,UAAU,EAAE,CAAC;SACnB,EAAC,CAAC;QAEH,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;;;;;IAEO,oCAAU;;;;IAAlB;QAAA,iBAIC;QAHA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,SAAS;;;;QAAC,UAAC,GAAG;YACnF,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC1B,EAAC,CAAC;KACJ;;;;IAEM,oCAAU;;;IAAjB;QACE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC1B,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB;;;;IAEM,mCAAS;;;IAAhB;QACE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC1B,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;KACrC;;gBAvDF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;;0BAND;CAIA,IAwDC;;;;;;IAnDC,gCAA+B;;;;;IAC/B,iCAAe;;;;;IACf,8CAAoC;;;;;IACpC,2CAAyB;;IAEzB,mCAA2D;;;;;;;ACd7D;IAGA;KAO+B;;gBAP9B,QAAQ,SAAC;oBACR,OAAO,EAAE,EACR;oBACD,YAAY,EAAE,EAAE;oBAChB,SAAS,EAAE,CAAC,eAAe,CAAC;oBAC5B,OAAO,EAAE,EAAE;iBACZ;;IAC6B,qBAAC;CAP/B;;;;;;;;;;;;;;"}